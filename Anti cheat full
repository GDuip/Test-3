local AntiCheat = {}

-- Configuration
local Config = {
    FUNCTION_MONITORING_ENABLED = true,
    MAX_REPORTS_PER_PLAYER = 5,
    REPORT_THRESHOLD = 3,
    FUNCTION_MONITOR_INTERVAL = 60,
    MODULE_MONITOR_INTERVAL = 120,
    ML_CHECK_INTERVAL = 30,
    DETECTION_THRESHOLD = 0.8
}

-- Customize monitored functions here if FUNCTION_MONITORING_ENABLED is true
local MonitoredFunctions = {
    -- Example: {func = game.Players.PlayerAdded, name = "PlayerAdded"}
}

-- Data Storage
local BannedPlayers = {}
local PlayerReports = {}
local FunctionHashes = {}
local ModuleHashes = {}
local FunctionMonitors = {}
local ModuleMonitors = {}
local PlayerActivity = {}
local GameFunctions = {}
local Metamethods = {}
local FunctionHooks = {}

----------------------- UTILITY FUNCTIONS -----------------------

-- Generate a hash of the input data (simple example - consider more robust methods)
local function generateHash(data)
    if type(data) == "string" then
        local hash = 0
        for i = 1, #data do
            hash = hash + string.byte(data, i)
        end
        return hash
    elseif type(data) == "function" then
        return string.dump(data)
    else
        return tostring(data)
    end
end

-- Check if a function has been tampered with (basic example)
local function isFunctionTampered(func, originalHash)
    local currentDump = string.dump(func)
    local currentHash = generateHash(currentDump)
    return currentHash ~= originalHash
end

-- Ban a player (implement proper ban logic using DataStoreService in a real game)
local function checkAndBan(player, reason)
    if not player or BannedPlayers[player.UserId] then return end
    BannedPlayers[player.UserId] = true
    print("Banning player " .. player.Name .. " (UserId: " .. player.UserId .. ") for: " .. reason)
    player:Kick("Banned for: " .. reason)
    -- TODO: Implement DataStoreService ban and other actions
end

-- Make a table read-only (metatable trick - can be bypassed by determined exploiters)
local function deepFreeze(tableToFreeze)
    local mt = {
        __index = function(t, k) return rawget(t, k) end,
        __newindex = function(t, k, v) error("Attempt to modify frozen table", 2) end,
        __metatable = false
    }
    setmetatable(tableToFreeze, mt)
    for _, v in pairs(tableToFreeze) do
        if type(v) == "table" then
            deepFreeze(v)
        end
    end
end

-- Basic function hooking (consider more secure methods if needed)
local function secureHookFunction(originalFunc, hookFunc)
    return hookFunc
end

-- Analyze player behavior (placeholder - implement actual analysis logic)
local function analyzePlayerBehavior(player)
    -- TODO: Implement machine learning or heuristic-based behavior analysis
    return 0
end

----------------------- MONITORING MODULES -----------------------

-- Monitor a function for tampering
local function monitorFunction(func, funcName)
    if not func then return end
    local funcDump = string.dump(func)
    local originalHash = generateHash(funcDump)
    FunctionHashes[funcName] = originalHash
    FunctionMonitors[funcName] = func
end

-- Check monitored functions for tampering
local function checkFunctionTampering()
    for funcName, func in pairs(FunctionMonitors) do
        local originalHash = FunctionHashes[funcName]
        if isFunctionTampered(func, originalHash) then
            for _, player in pairs(game.Players:GetPlayers()) do
                checkAndBan(player, "Function Tampering Detected: " .. funcName)
            end
        end
    end
end

-- Monitor a module for tampering
local function monitorModule(module, moduleName)
    if not module then return end
    local moduleSource = module:GetAttribute("Source") or ""
    local originalHash = generateHash(moduleSource)
    ModuleHashes[moduleName] = originalHash
    ModuleMonitors[moduleName] = module
end

-- Check monitored modules for tampering
local function checkModuleTampering()
    for moduleName, module in pairs(ModuleMonitors) do
        local originalHash = ModuleHashes[moduleName]
        local currentSource = module:GetAttribute("Source") or ""
        local currentHash = generateHash(currentSource)
        if currentHash ~= originalHash then
            for _, player in pairs(game.Players:GetPlayers()) do
                checkAndBan(player, "Module Tampering Detected: " .. moduleName)
            end
        end
    end
end

----------------------- METAMETHOD MONITORING -----------------------

-- Hook a metamethod to detect tampering
local function hookMetamethod(object, metamethodName)
    if not object or not metamethodName then return end
    local mt = getmetatable(object)
    if not mt then return end
    local originalMetamethod = mt[metamethodName]
    if not originalMetamethod then return end
    local hookedMetamethod = function(...)
        local result = originalMetamethod(...)
        local player = game.Players:GetPlayerFromCharacter(object)
        if player then
            checkAndBan(player, "Metamethod Tampering Detected: " .. metamethodName)
        end
        return result
    end
    mt[metamethodName] = hookedMetamethod
    Metamethods[metamethodName] = {object, originalMetamethod}
end

-- Restore hooked metamethods
local function restoreMetamethods()
    for metamethodName, data in pairs(Metamethods) do
        local object, originalMetamethod = data[1], data[2]
        local mt = getmetatable(object)
        if mt then
            mt[metamethodName] = originalMetamethod
        end
    end
    Metamethods = {}
end

----------------------- PLAYER REPORTING -----------------------

-- Report a player for suspicious behavior
local function reportPlayer(reporter, reportedPlayer, reason)
    if not reporter or not reportedPlayer or not reason then return end
    if reporter == reportedPlayer then return end
    if (PlayerReports[reporter.UserId] or 0) >= Config.MAX_REPORTS_PER_PLAYER then return end
    PlayerReports[reporter.UserId] = (PlayerReports[reporter.UserId] or 0) + 1
    if not PlayerReports[reportedPlayer.UserId] then
        PlayerReports[reportedPlayer.UserId] = {Reports = 1, Reasons = {reason}}
    else
        PlayerReports[reportedPlayer.UserId].Reports = PlayerReports[reportedPlayer.UserId].Reports + 1
        table.insert(PlayerReports[reportedPlayer.UserId].Reasons, reason)
    end
    if PlayerReports[reportedPlayer.UserId].Reports >= Config.REPORT_THRESHOLD then
        print("Player " .. reportedPlayer.Name .. " has reached the report threshold. Reviewing reports: " .. table.concat(PlayerReports[reportedPlayer.UserId].Reasons, ", "))
        -- TODO: Implement review process (log to admin panel, notify staff, etc.)
    end
end

----------------------- GAME FUNCTION MONITORING -----------------------

-- Monitor game functions for tampering
local function monitorGameFunctions()
    local functionsToMonitor = {
        game.Players.PlayerAdded,
        game.Players.PlayerRemoving,
        game.ReplicatedStorage.RemoteEvent.OnServerEvent,
        game.ReplicatedStorage.RemoteFunction.OnServerInvoke,
        game.Workspace.ChildAdded,
        game.Workspace.ChildRemoved,
    }
    for _, func in ipairs(functionsToMonitor) do
        local funcName = tostring(func)
        monitorFunction(func, funcName)
        GameFunctions[funcName] = func
    end
end

----------------------- SERVER-SIDE VALIDATION -----------------------

-- Validate player actions on the server
local function validateAction(player, action, data)
    if not player or not action then return false end
    -- TODO: Implement server-side validation logic based on your game's rules
    if action == "Move" then
        local speed = data.Speed
        if speed > 10 then -- Example: Max speed limit
            checkAndBan(player, "Invalid Move Speed")
            return false
        end
    elseif action == "ResourceChange" then
        local resource = data.Resource
        local amount = data.Amount
        if resource == "Health" and amount > 100 then -- Example: Max health change
            checkAndBan(player, "Invalid Health Change")
            return false
        end
    end
    return true
end

----------------------- PLAYER ACTIVITY TRACKING -----------------------

-- Track player activity for behavior analysis
local function trackPlayerActivity(player, activityType, value)
    if not player then return end
    PlayerActivity[player.UserId] = PlayerActivity[player.UserId] or {}
    PlayerActivity[player.UserId][activityType] = value
end

----------------------- FUNCTION HOOKING -----------------------

-- Hook a function (use secureHookFunction if you have a more robust method)
local function hookFunction(func, hookFunction, funcName)
    if not func or not hookFunction or not funcName then return end
    local hookedFunc = secureHookFunction(func, hookFunction)
    FunctionHooks[funcName] = {func, hookedFunc}
    _G[funcName] = hookedFunc -- Be cautious about using _G
end

-- Restore hooked functions
local function restoreFunctionHooks()
    for funcName, data in pairs(FunctionHooks) do
        local originalFunc = data[1]
        _G[funcName] = originalFunc
    end
    FunctionHooks = {}
end

----------------------- ANTI-CHEAT INITIALIZATION -----------------------

-- Initialize the anti-cheat module
function AntiCheat.Initialize()
    -- Freeze critical tables
    deepFreeze(BannedPlayers)
    deepFreeze(PlayerReports)
    deepFreeze(FunctionHashes)
    deepFreeze(ModuleHashes)
    deepFreeze(FunctionMonitors)
    deepFreeze(ModuleMonitors)
    deepFreeze(PlayerActivity)
    deepFreeze(GameFunctions)
    deepFreeze(Metamethods)
    deepFreeze(FunctionHooks)

    -- Monitor game functions
    monitorGameFunctions()

    -- Monitor modules in ServerScriptService
    for _, module in ipairs(game.ServerScriptService:GetDescendants()) do
        if module:IsA("ModuleScript") then
            monitorModule(module, module.Name)
        end
    end

    -- Hook metamethods for existing players
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Character then
            hookMetamethod(player.Character, "__index")
            hookMetamethod(player.Character, "__newindex")
        end
    end

    -- Monitor new scripts added to the game
    game.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("Script") or descendant:IsA("LocalScript") then
            for _, player in ipairs(game.Players:GetPlayers()) do
                checkAndBan(player, "New Script Added: " .. descendant.Name)
            end
        elseif descendant:IsA("ModuleScript") then
            monitorModule(descendant, descendant.Name)
        end
    end)

    -- Periodic function tampering checks
    task.spawn(function()
        while true do
            task.wait(Config.FUNCTION_MONITOR_INTERVAL)
            checkFunctionTampering()
        end
    end)

    -- Periodic module tampering checks
    task.spawn(function()
        while true do
            task.wait(Config.MODULE_MONITOR_INTERVAL)
            checkModuleTampering()
        end
    end)

    -- Player connection handling
    game.Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            hookMetamethod(character, "__index")
            hookMetamethod(character, "__newindex")
        end)
        task.spawn(function()
            while player and player.Parent do
                task.wait(Config.ML_CHECK_INTERVAL)
                local behaviorScore = analyzePlayerBehavior(player)
                if behaviorScore >= Config.DETECTION_THRESHOLD then
                    checkAndBan(player, "Unusual Behavior Detected")
                end
            end
        end)
    end)

    -- Player removal handling
    game.Players.PlayerRemoving:Connect(function(player)
        PlayerActivity[player.UserId] = nil
        PlayerReports[player.UserId] = nil
    end)

    -- Function monitoring setup from config
    if Config.FUNCTION_MONITORING_ENABLED then
        for _, funcInfo in ipairs(MonitoredFunctions) do
            if funcInfo and funcInfo.func and funcInfo.name then
                monitorFunction(funcInfo.func, funcInfo.name)
            else
                warn("Invalid entry in MonitoredFunctions. Ensure each entry has 'func' and 'name'.")
            end
        end
    end

    print("Anti-Cheat Module Initialized.")
end

--[[
    Client-Side Anti-Cheat Script
]]

-- Configuration
local BAN_DURATION = 2592000          -- 1 month in seconds (30 days)
local WEBHOOK_URL = ""               -- Replace with your Discord webhook URL (or other logging service)
local FUNCTION_MONITOR_INTERVAL = 10
local API_MONITOR_INTERVAL = 5
local PROPERTY_MONITOR_INTERVAL = 2
local INPUT_RATE_LIMIT_INTERVAL = 0.1
local MONITORING_LOOP_INTERVAL = 2
local PLAYER_MODULE_MONITOR_INTERVAL = 60
local PLAYER_MODULE_PATH_COMPONENT = "PlayerModule"

-- Monitored APIs (customize for your game)
local MONITORED_APIS = {
    FireServer = {parent = "RemoteEvent", eventNameContains = {}},
    InvokeServer = {parent = "RemoteFunction", eventNameContains = {}},
    SetAttribute = {parentTypes = {"BasePart", "Model", "DataModel"}, attributeNameContains = {}},
    GetAttribute = {parentTypes = {"BasePart", "Model", "DataModel"}, attributeNameContains = {}},
    SetNetworkOwnership = {parentTypes = {"BasePart", "Model"}},
}

-- Monitored game functions (customize for your game)
local MONITORED_GAME_FUNCTIONS_KEYWORDS = {
    -- Example: "DealDamage", "ApplyForce", "GrantItem"
}

-- Monitored player properties (customize for your game)
local MONITORED_PLAYER_PROPERTIES = {
    ["Humanoid.Health"] = {maxValue = 200, minValue = -100, banReason = "Impossible Health Value"},
    ["Humanoid.WalkSpeed"] = {maxValue = 50, minValue = 0, banReason = "Impossible WalkSpeed"},
}

-- Input rate limits (customize for your game)
local INPUT_RATE_LIMITS = {
    ["JumpAction"] = {maxRate = 5, banReason = "Excessive Jump Rate"},
    ["AttackAction"] = {maxRate = 10, banReason = "Excessive Attack Rate"},
}

-- Variables and Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")

local LocalPlayer = Players.LocalPlayer
local BannedPlayers = {} -- In-memory ban list (use DataStoreService for persistence)
local FunctionProxies = {}
local LastActionTimes = {}
local APIMonitoringHooks = {}
local NamecallHookEnabled = true
local HandshakeInts = {}
local Hooks = {}

----------------------- UTILITY FUNCTIONS -----------------------

-- (These are mostly the same as in the server script, but I've included them for completeness)

-- Check and ban a player
local function checkAndBan(player, reason)
    if not player or not player.UserId then return end
    if BannedPlayers[player.UserId] then return end

    BannedPlayers[player.UserId] = {
        BanTime = os.time(),
        Reason = reason,
        Duration = BAN_DURATION
    }
    player:Kick("[Anti-Cheat] Banned: " .. reason)
    print("Player " .. player.Name .. " banned for: " .. reason)

    if WEBHOOK_URL ~= "" then
        local success, err = pcall(function()
            local banData = {
                PlayerId = player.UserId,
                PlayerName = player.Name,
                Reason = reason,
                BanTime = os.date("%Y-%m-%d %H:%M:%S", os.time()),
                DurationSeconds = BAN_DURATION
            }
            HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(banData))
        end)
        if not success then
            warn("Failed to send ban data to webhook:", err)
        end
    end
end

-- Securely hook a function (simplified example)
local function secureHookFunction(func, hookFunction)
    local originalFunc = func
    local hookedFunc = function(...)
        hookFunction(...)
        return originalFunc(...)
    end
    return hookedFunc
end

-- Check if a function is tampered (basic example)
local function isFunctionTampered(func)
    if typeof(func) ~= "function" then
        return false
    end
    local upvalues = debug.getupvalues(func)
    for _, upvalue in ipairs(upvalues) do
        if type(upvalue) == "function" and debug.info(upvalue, "s") then
            return true
        end
    end
    return false
end

-- Monitor potentially tampered functions using proxies
local function monitorPotentiallyTamperedFunction(func, functionName, detectionReason)
    if typeof(func) ~= "function" then return end
    if FunctionProxies[func] then
        return FunctionProxies[func]
    end

    local original = func
    local proxy = newproxy(true)
    local meta = {
        __call = function(_, ...)
            if isFunctionTampered(original) then
                if LocalPlayer then
                    checkAndBan(LocalPlayer, detectionReason or ("Function Tampering Detected: " .. functionName))
                end
                error(detectionReason or ("Function Tampering Detected: " .. functionName), 2)
            end
            return original(...)
        end,
        __metatable = false,
    }
    setmetatable(proxy, meta)
    FunctionProxies[func] = proxy
    return proxy
end

-- Get nested property values using dot notation
local function getPathValue(object, path)
    local parts = string.split(path, ".")
    local current = object
    for _, part in ipairs(parts) do
        if current and current[part] then
            current = current[part]
        else
            return nil
        end
    end
    return current
end

----------------------- MONITORING FUNCTIONS (PERIODIC - COMBINED LOOP) -----------------------

-- Monitor game functions for tampering
local function monitorGameFunctions()
    for _, keyword in ipairs(MONITORED_GAME_FUNCTIONS_KEYWORDS) do
        for i, v in getgc() do
            if typeof(v) == "function" and islclosure(v) then
                local funcInfo = debug.info(v, "n")
                if funcInfo and funcInfo.name and string.find(funcInfo.name, keyword, 1, true) then
                    monitorPotentiallyTamperedFunction(v, funcInfo.name, "Game Function Tampering Detected: " .. funcInfo.name)
                end
            end
        end
    end
end

-- Monitor PlayerModule periodically
local function monitorPlayerModulePeriodically()
    task.spawn(function()
        while true do
            task.wait(PLAYER_MODULE_MONITOR_INTERVAL)
            monitorPlayerModule()
        end
    end)
end

-- Monitor PlayerModule for tampering
local function monitorPlayerModule()
    for Index, PotentialFunction in next, getgc(true) do
        if typeof(PotentialFunction) == "function" then
            local ScriptInfo = debug.info(PotentialFunction, "s")
            if ScriptInfo and ScriptInfo.source then
                if string.find(ScriptInfo.source, PLAYER_MODULE_PATH_COMPONENT, 1, true) then
                    local Upvalues = debug.getupvalues(PotentialFunction)
                    for UpvalueIndex, UpvalueValue in ipairs(Upvalues) do
                        if typeof(UpvalueValue) == "function" then
                            warn("Anti-Cheat: Potential PlayerModule Tampering Detected in script:", ScriptInfo.source)
                            warn("Function:", PotentialFunction)
                            warn("Upvalue Index:", UpvalueIndex, ", Upvalue Type:", typeof(UpvalueValue))

                            if LocalPlayer then
                                checkAndBan(LocalPlayer, "PlayerModule Tampering Detected (Function Upvalue)")
                            end
                            error("Anti-Cheat: PlayerModule Hooked (Function Upvalue)", 2)
                            return
                        end
                    end
                end
            end
        end
    end
end

-- Monitor API calls for suspicious activity
local function monitorApiCalls()
    for apiName, apiConfig in pairs(MONITORED_APIS) do
        local apiParentType = apiConfig.parentTypes
        local apiParent = apiConfig.parent
        local eventNameContains = apiConfig.eventNameContains
        local functionNameContains = apiConfig.functionNameContains

        if apiParent then
            -- Monitor specific events/functions by name
            local targetParent = ReplicatedStorage:FindFirstChild(apiParent) or game:GetService(apiParent)
            if targetParent then
                if apiName == "FireServer" or apiName == "OnServerEvent" or apiName == "OnClientEvent" then
                    for _, remote in pairs(targetParent:GetDescendants()) do
                        if remote:IsA("RemoteEvent") then
                            local hookId = apiName .. "_" .. remote:GetFullName()
                            if not APIMonitoringHooks[hookId] then
                                APIMonitoringHooks[hookId] = hookmetamethod(remote, "__namecall", function(self, ...)
                                    local method = getnamecallmethod()
                                    local args = {...}
                                    if method == apiName then
                                        local eventName = args[1]
                                        local isNameMatch = #eventNameContains == 0
                                        for _, nameFilter in ipairs(eventNameContains) do
                                            if string.find(eventName, nameFilter, 1, true) then
                                                isNameMatch = true
                                                break
                                            end
                                        end

                                        if isNameMatch then
                                            if LocalPlayer then
                                                checkAndBan(LocalPlayer, "Suspicious API Call: " .. apiName .. " on " .. remote:GetFullName() .. (eventName and (" EventName: " .. eventName) or ""))
                                            end
                                            error("Anti-Cheat: Suspicious API Call: " .. apiName .. " on " .. remote:GetFullName() .. (eventName and (" EventName: " .. eventName) or ""), 2)
                                        end
                                    end
                                    return APIMonitoringHooks[hookId](self, ...)
                                end)
                            end
                        end
                    end

                elseif apiName == "InvokeServer" or apiName == "OnServerInvoke" or apiName == "OnClientInvoke" then
                    for _, remote in pairs(targetParent:GetDescendants()) do
                        if remote:IsA("RemoteFunction") then
                            local hookId = apiName .. "_" .. remote:GetFullName()
                            if not APIMonitoringHooks[hookId] then
                                APIMonitoringHooks[hookId] = hookmetamethod(remote, "__namecall", function(self, ...)
                                    local method = getnamecallmethod()
                                    local args = {...}
                                    if method == apiName then
                                        local functionName = args[1]
                                        local isNameMatch = #functionNameContains == 0
                                        for _, nameFilter in ipairs(functionNameContains) do
                                            if string.find(functionName, nameFilter, 1, true) then
                                                isNameMatch = true
                                                break
                                            end
                                        end

                                        if isNameMatch then
                                            if LocalPlayer then
                                                checkAndBan(LocalPlayer, "Suspicious API Call: " .. apiName .. " on " .. remote:GetFullName() .. (functionName and (" FunctionName: " .. functionName) or ""))
                                            end
                                            error("Anti-Cheat: Suspicious API Call: " .. apiName .. " on " .. remote:GetFullName() .. (functionName and (" FunctionName: " .. functionName) or ""), 2)
                                        end
                                    end
                                    return APIMonitoringHooks[hookId](self, ...)
                                end)
                            end
                        end
                    end
                end

            elseif apiParentType then
                -- Monitor API calls on specific object types
                for _, objectType in ipairs(apiParentType) do
                    local hookId = apiName .. "_" .. objectType
                    if not APIMonitoringHooks[hookId] then
                        APIMonitoringHooks[hookId] = hookmetamethod(game, "__namecall", function(self, ...)
                            local method = getnamecallmethod()
                            local args = {...}
                            if method == apiName and typeof(self) == objectType then
                                local attributeName = args[1]
                                local isNameMatch = #apiConfig.attributeNameContains == 0
                                for _, nameFilter in ipairs(apiConfig.attributeNameContains) do
                                    if string.find(attributeName, nameFilter, 1, true) then
                                        isNameMatch = true
                                        break
                                    end
                                end
                                if isNameMatch then
                                    if LocalPlayer then
                                        checkAndBan(LocalPlayer, "Suspicious API Call: " .. apiName .. " on " .. objectType .. (attributeName and (" AttributeName: " .. attributeName) or ""))
                                    end
                                    error("Anti-Cheat: Suspicious API Call: " .. apiName .. " on " .. objectType .. (attributeName and (" AttributeName: " .. attributeName) or ""), 2)
                                end
                            end
                            return APIMonitoringHooks[hookId](game, ...)
                        end)
                    end
                end
            end
        end
    end
end

-- Monitor player properties for impossible values
local function monitorPlayerProperties()
    if not LocalPlayer or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("Humanoid") then return end

    for propertyPath, config in pairs(MONITORED_PLAYER_PROPERTIES) do
        local propertyValue = getPathValue(LocalPlayer, propertyPath)
        if propertyValue ~= nil then
            if config.maxValue ~= nil and propertyValue > config.maxValue then
                checkAndBan(LocalPlayer, config.banReason or ("Property Check Failed: " .. propertyPath .. " exceeds max value"))
                error("Anti-Cheat: Property Check Failed: " .. propertyPath .. " exceeds max value", 2)
            elseif config.minValue ~= nil and propertyValue < config.minValue then
                checkAndBan(LocalPlayer, config.banReason or ("Property Check Failed: " .. propertyPath .. " below min value"))
                error("Anti-Cheat: Property Check Failed: " .. propertyPath .. " below min value", 2)
            end
        end
    end
end

-- Main monitoring loop
local function monitorAllPeriodically()
    task.spawn(function()
        while true do
            monitorGameFunctions()
            monitorApiCalls()
            monitorPlayerProperties()
            task.wait(MONITORING_LOOP_INTERVAL)
        end
    end)
end

----------------------- INPUT RATE LIMITING -----------------------

-- Limit the rate of player inputs
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end

    for actionName, config in pairs(INPUT_RATE_LIMITS) do
        if input.UserEventType == Enum.UserEventType.Keyboard then
            local actionKey = string.lower(input.KeyCode.Name) .. "Action"
            if actionKey == actionName:lower() then
                local currentTime = os.clock()
                local lastActionTime = LastActionTimes[actionName] or 0
                if (currentTime - lastActionTime) < INPUT_RATE_LIMIT_INTERVAL then
                    if LocalPlayer then
                        checkAndBan(LocalPlayer, config.banReason or ("Input Rate Limit Exceeded: " .. actionName))
                    end
                    error("Anti-Cheat: Input Rate Limit Exceeded: " .. actionName, 2)
                else
                    LastActionTimes[actionName] = currentTime
                end
            end
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
            local actionMouseButton = "MouseButton1Action"
            if actionMouseButton == actionName:lower() then
                local currentTime = os.clock()
                local lastActionTime = LastActionTimes[actionName] or 0
                if (currentTime - lastActionTime) < INPUT_RATE_LIMIT_INTERVAL then
                    if LocalPlayer then
                        checkAndBan(LocalPlayer, config.banReason or ("Input Rate Limit Exceeded: " .. actionName))
                    end
                    error("Anti-Cheat: Input Rate Limit Exceeded: " .. actionName, 2)
                else
                    LastActionTimes[actionName] = currentTime
                end
            end
        end
        -- Add rate limiting for other input types as needed
    end
end)

----------------------- HANDSHAKE (Simplified) -----------------------

-- Basic handshake mechanism (example - adjust as needed)
local Remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CharacterSoundEvent")

local function __call(T, v1, v2, v3, v4, v5, v6)
    if ((v1 and v1 ~= v2) and v2 ~= v3) then
        T[math.round(((T[11] / 90) ^ (1 / 3) - 112) / -9) + 1] = T[math.floor(math.sqrt(v3 - 555))]
        return T
    end
    return T
end

local Handshake = setmetatable({
    {},
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    math.random(1000000, 100000000),
    newproxy(true)
}, {__call = __call})

Remote.OnClientEvent:Connect(function(Method, _, NewArgs)
    if Method == "💱AC" then
        if NewArgs then
            for i = 1, #NewArgs do
                Handshake[i + 1] = NewArgs[i]
            end
        end
    end
end)

task.spawn(function()
    while task.wait(0.5) do
        Remote:fireServer("💱AC", Handshake(887, 782, 780, 648, 659), nil)
    end
end)

----------------------- START ANTI-CHEAT MONITORING -----------------------

-- Start the anti-cheat monitoring loops
monitorAllPeriodically()
monitorPlayerModulePeriodically()

print("Comprehensive Client-Side Anti-Cheat Initialized. Monitoring game for suspicious activity.")

-- Initialize the server-side anti-cheat module
return AntiCheat
